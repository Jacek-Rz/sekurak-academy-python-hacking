from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys

options = Options()
#options.add_argument("--headless=new")
options.add_experimental_option("detach", True)

driver = webdriver.Chrome(options=options)
driver.get("http://target.lab/")
driver.set_window_size(1920, 1080)

# Ładowanie payloadów SQL Injection oraz ich oczyszczenie
sqli_polyglots_file = open("./sqli_polyglots.txt")
sqli_polyglots = sqli_polyglots_file.readlines()
sqli_polyglots = [polyglot.strip() for polyglot in sqli_polyglots]

# Wyszukanie wszystkich formularzy na stronie
forms = driver.find_elements(By.XPATH, "//form")
# Pozyskanie nadrzędnego elementu <html> do późniejszego pobrania zawartości strony
html = driver.find_element(By.XPATH, "//html")

# Pętla przechodząca po liście odkrytych formularzy
for form in forms:
    print(f"[+] Found form {form.get_attribute('id')}:")

    # Pobranie inputów w danym formularzu
    inputs = form.find_elements(By.XPATH, ".//input")
    # Pobranie przycisku danego formularza
    button = form.find_element(By.XPATH, ".//button")

    # Pętla przechodząca po wszystkich inputach danego formularza
    for form_input in inputs:
        print(f"\t - Input: {form_input.get_attribute('name')}")
        # Sprawdzenie każdego inputa pod kątem podatności z wykorzystaniem wcześniej załadowanych payloadów
        for payload in sqli_polyglots:
            form_input.send_keys(payload)
            button.click()
            if "SQL Error" in html.get_attribute("innerHTML"):
                print(f"\t\t- Vulnerability: SQL Injection!!!")
                print(f"\t\t\t- Payload: {payload}")