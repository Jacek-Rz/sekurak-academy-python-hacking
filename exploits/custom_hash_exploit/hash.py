#!/usr/bin/python3
import pyDes
import math
import sys

# Funkcja zamieniająca GUID (Microsoftowy odpowiednik UUIDv4) na bajty
# Np. a5b440d3-ec2c-4da3-b85f-a6bd10033ac8 to będzie d340b4a5 2cec a34d b85f a6bd10033ac8
# Zauważ, że pierwsze trzy segmenty GUID'a są zamieniane w odwrotnej kolejności bajtów
def guid2bytes(guid : str):
    sections = guid.split("-")
    result = b""
    for i in range(len(sections) - 2):
        result += bytes.fromhex(sections[i])[::-1]
    for i in range(len(sections) - 2, len(sections)):
        result += bytes.fromhex(sections[i])
    return result

# Ta funkcja zamienia podany ciąg bajtów w argumencie data, na bloki o długiści *size*
# Funkcja zwraca listę bloków, a każdy blok ma postać bajtów (bytes)
def split2blocks(data : bytes, size):
    parts = math.floor(len(data) / size)
    result = []
    for i in range(parts):
        result.append(data[size*i:size*(i+1)])
    leftovers = len(data) - (parts * size)
    if leftovers > 0:
        result.append(data[-leftovers:])
    return result[::-1]

# Funkcja xor wykorzystuje wbudowaną funkcję *zip*, która zwraca listę krotek
# W ten sposób równomiernie przechodzimy w pętli przez listę var oraz key
def xor(var, key):
    return bytes(a ^ b for a, b in zip(var, key))

if len(sys.argv) < 4:
    print(f"Usage: {sys.argv[0]} [company_id] [user_id] [password]")
    exit()

print(f"[+] Initialization...")
iv = b"\x00\x00\x00\x00\x00\x00\x00\x00"
key =  b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18"

# Parsowanie argumentów
company_id = guid2bytes(sys.argv[1])
user_id = guid2bytes(sys.argv[2])
password = sys.argv[3].encode("utf-8")

# Inicjalizacja biblioteki pyDes
tripledes = pyDes.triple_des(key, pyDes.CBC, iv, pad=b"\x00")

print(f"[+] Generating hash...")

# Szyfrowanie ciągu bajtów company_id + password + user_id
ciphertext = tripledes.encrypt(company_id + password + user_id)
print(f"Cleartext: {(company_id + password + user_id).hex()}")
print(f"Ciphertext: {ciphertext.hex()}")

# Wyświetlenie hasha podanego hasła
print(ciphertext[-8:].hex())