import pyDes
import math
import sys

# Artykul: 

def guid2bytes(guid : str):
    sections = guid.split("-")
    result = b""
    for i in range(len(sections) - 2):
        result += bytes.fromhex(sections[i])[::-1]
    for i in range(len(sections) - 2, len(sections)):
        result += bytes.fromhex(sections[i])
    return result

def split2blocks(data : bytes, size):
    parts = math.floor(len(data) / size)
    result = []
    for i in range(parts):
        result.append(data[size*i:size*(i+1)])
    leftovers = len(data) - (parts * size)
    if leftovers > 0:
        result.append(data[-leftovers:])
    return result[::-1]
    
def xor(var, key):
    return bytes(a ^ b for a, b in zip(var, key))

if len(sys.argv) < 4:
    print(f"Usage: {sys.argv[0]} [company_id] [user_id] [hash]")
    exit()

print(f"[+] Initialization...")
iv = b"\x00\x00\x00\x00\x00\x00\x00\x00"
key =  b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18"

tripledes = pyDes.triple_des(key, pyDes.CBC, iv, pad=b"\x00")

company_id = guid2bytes(sys.argv[1])
user_id = guid2bytes(sys.argv[2])
hash = bytearray.fromhex(sys.argv[3])

target_cleartext = b"A"*8 + user_id
cleartext_blocks = split2blocks(target_cleartext, 8)

recoverd_ciphertext = hash
current_block = hash
for cleartext_block in cleartext_blocks[:-1]:
    block = tripledes.decrypt(current_block)
    previous_block = xor(block, cleartext_block)

    current_block = previous_block
    recoverd_ciphertext = current_block + recoverd_ciphertext

ciphertext = tripledes.encrypt(company_id) + recoverd_ciphertext
cleartext = tripledes.decrypt(ciphertext)

print(cleartext[16:24].decode("utf-8"))